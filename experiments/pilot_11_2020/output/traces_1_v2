/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:22 {def infix_to_postfix(expression_str: str) -> str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:41 {    if not balanced_parentheses(expression_str):} (expression_str=a+b*(c^d-e)^(f+g*h)-i)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:4 {def balanced_parentheses(parentheses: str) -> bool:} (parentheses=a+b*(c^d-e)^(f+g*h)-i)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:17 {    stack = Stack()} (parentheses=a+b*(c^d-e)^(f+g*h)-i)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:14 {    def __init__(self, limit: int = 10):} (self,limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:15 {        self.stack = []} (self,limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:16 {        self.limit = limit} (self=[],limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:16 {        self.limit = limit} (self=[],limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:18 {    bracket_pairs = {"(": ")", "[": "]", "{": "}"}} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[])
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'})
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=a)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=a)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=a)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=+)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=+)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=+)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=b)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=b)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=b)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=*)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=*)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=*)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=()
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:21 {            stack.push(bracket)} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=[],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=[],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=[],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['('],data=()
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=()
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=c)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=c)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=c)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=^)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=^)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=^)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=d)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=d)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=d)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=-)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=-)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=-)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=e)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=e)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=e)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:23 {            if stack.is_empty() or bracket_pairs[stack.pop()] != bracket:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=^)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=^)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=^)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=()
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:21 {            stack.push(bracket)} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=[],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=[],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=[],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['('],data=()
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=()
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=f)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=f)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=f)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=+)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=+)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=+)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=g)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=g)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=g)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=*)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=*)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=*)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=h)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=h)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=h)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:23 {            if stack.is_empty() or bracket_pairs[stack.pop()] != bracket:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=['('],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=))
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=-)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=-)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=-)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:20 {        if bracket in bracket_pairs:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=i)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:22 {        elif bracket in (")", "]", "}"):} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=i)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:19 {    for bracket in parentheses:} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=i)
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:25 {    return stack.is_empty()} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=i)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/balanced_parentheses.py:data_structures.stacks.balanced_parentheses:balanced_parentheses:25 {    return stack.is_empty()} (parentheses=a+b*(c^d-e)^(f+g*h)-i,stack=[],bracket_pairs={'(': ')', '[': ']', '{': '}'},bracket=i)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:43 {    stack = Stack()} (expression_str=a+b*(c^d-e)^(f+g*h)-i)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:14 {    def __init__(self, limit: int = 10):} (self,limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:15 {        self.stack = []} (self,limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:16 {        self.limit = limit} (self=[],limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:__init__:16 {        self.limit = limit} (self=[],limit=10)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:44 {    postfix = []} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=[],char=a)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=[],char=a)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a'],char=a)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=[],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=[],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=[],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+'],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a'],char=b)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a'],char=b)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b'],char=b)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:49 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*'],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*'],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*'],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '('],data=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b'],char=c)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b'],char=c)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c'],char=c)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*', '('],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*', '('],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '('],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '(', '^'],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c'],char=d)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c'],char=d)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c', 'd'],char=d)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c', 'd'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c', 'd'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c', 'd'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c', 'd'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:56 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '^'],postfix=['a', 'b', 'c', 'd'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '(', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c', 'd', '^'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c', 'd', '^'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*', '('],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*', '('],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '('],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '(', '-'],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^'],char=e)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^'],char=e)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^', 'e'],char=e)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^', 'e'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^', 'e'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^', 'e'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:51 {            while not stack.is_empty() and stack.peek() != "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^', 'e'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:52 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '(', '-'],postfix=['a', 'b', 'c', 'd', '^', 'e'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '(', '-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:51 {            while not stack.is_empty() and stack.peek() != "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:53 {            stack.pop()} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*'],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*'],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*'],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^'],data=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:49 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*', '^'],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*', '^'],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^'],data=()
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^', '('],data=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=f)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-'],char=f)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=f)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=()
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*', '^', '('],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*', '^', '('],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^', '('],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^', '(', '+'],data=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=g)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f'],char=g)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=g)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=['+', '*', '^', '(', '+'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=['+', '*', '^', '(', '+'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^', '(', '+'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['+', '*', '^', '(', '+', '*'],data=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=h)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g'],char=h)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h'],char=h)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:51 {            while not stack.is_empty() and stack.peek() != "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:52 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^', '(', '+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:51 {            while not stack.is_empty() and stack.peek() != "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:52 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '(', '+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^', '(', '+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:51 {            while not stack.is_empty() and stack.peek() != "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:53 {            stack.pop()} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^', '('],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^', '('])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=))
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:48 {        elif char == "(":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:50 {        elif char == ")":} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=^)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:56 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*', '^'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*', '^'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=*)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:56 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+', '*'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+', '*'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:34 {    def peek(self):} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:peek:36 {        return self.stack[-1]} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:13 {def precedence(char: str) -> int:} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:precedence:19 {    return {"+": 1, "-": 1, "*": 2, "/": 2, "^": 3}.get(char, -1)} (char=+)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:56 {                postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['+'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['+'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:55 {            while not stack.is_empty() and precedence(char) <= precedence(stack.peek()):} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:57 {            stack.push(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:24 {    def push(self, data):} (self=[],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:26 {        if len(self.stack) >= self.limit:} (self=[],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=[],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:push:28 {        self.stack.append(data)} (self=['-'],data=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['-'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+'],char=-)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:46 {        if char.isalpha() or char.isdigit():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['-'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:47 {            postfix.append(char)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['-'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:45 {    for char in expression_str:} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['-'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+', 'i'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:58 {    while not stack.is_empty():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['-'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+', 'i'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=['-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=['-'])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:59 {        postfix.append(stack.pop())} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=['-'],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+', 'i'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:30 {    def pop(self):} (self=['-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=['-'])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:pop:32 {        return self.stack.pop()} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:58 {    while not stack.is_empty():} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+', 'i', '-'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:38 {    def is_empty(self) -> bool:} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/stack.py:data_structures.stacks.stack:is_empty:40 {        return not bool(self.stack)} (self=[])
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:60 {    return " ".join(postfix)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+', 'i', '-'],char=i)
/home/benjamin/workspace/Python/data_structures/stacks/infix_to_postfix_conversion.py:__main__:infix_to_postfix:60 {    return " ".join(postfix)} (expression_str=a+b*(c^d-e)^(f+g*h)-i,stack=[],postfix=['a', 'b', 'c', 'd', '^', 'e', '-', 'f', 'g', 'h', '*', '+', '^', '*', '+', 'i', '-'],char=i)
